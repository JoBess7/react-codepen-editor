{"version":3,"sources":["../../src/colors.js","../../src/index.js","App.js","index.js"],"names":["colors","DynamicStyles","themeTransitionSpeed","mobileQuery","createGlobalStyle","CreateDynamicStyles","_resettable","resettable","useState","HTML","CSS","JS","initial","iFrameId","uuid","useEffect","theme","value","document","Object","setTheme","frame","setIFrame","writeInFrame","_HTML","_CSS","checkForUndefined","updateTextArea","type","val","tmpHTML","tmpCSS","tmpJS","setHTML","setCSS","setJS","iFrame","className","id","title","onClick","resetButton","setTimeout","size","style","height","selected","setSelected","onValueChange","newVal","highlight","code","languages","scrolling","marginWidth","marginHeight","App","role","aria-label","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ac3f32fa.chunk.js","sourcesContent":["const colors = [\n  {\n    '--text': ['rgb(14,20,27)', 'rgb(245,245,245)']\n  },\n  {\n    '--color-gray-500:': ['hsl(225deg, 7%, 60%)', 'hsl(210deg, 8%, 50%)']\n  },\n  {\n    '--color-gray-600:': ['hsl(225deg, 15%, 50%)', 'hsl(210deg, 12%, 55%)']\n  },\n  {\n    '--prism-base': ['#25414e', '#f8f8f2']\n  },\n  {\n    '--prism-background': ['#eeeff1', '#172028']\n  },\n  {\n    '--prism-comment': ['#aabfc9', '#8292a2']\n  },\n  {\n    '--prism-prolog': ['#aabfc9', '#8292a2']\n  },\n  {\n    '--prism-doctype': ['#aabfc9', '#8292a2']\n  },\n  {\n    '--prism-cdata': ['#39adb5', '#8292a2']\n  },\n  {\n    '--prism-punctuation': ['#39adb5', '#f8f8f2']\n  },\n  {\n    '--prism-namespace': ['#90a4ae', '#f8f8f2']\n  },\n  {\n    '--prism-property': ['#0eb6c2', '#f92672']\n  },\n  {\n    '--prism-tag': ['#e53935', '#ee5f93']\n  },\n  {\n    '--prism-constant': ['#7c4dff', '#f92672']\n  },\n  {\n    '--prism-symbol': ['#7c4dff', '#f92672']\n  },\n  {\n    '--prism-deleted': ['#e53935', '#f92672']\n  },\n  {\n    '--prism-boolean': ['#7c4dff', '#f92672']\n  },\n  {\n    '--prism-number': ['#f76d47', '#ae81ff']\n  },\n  {\n    '--prism-selector': ['#17242c', '#a6e22e']\n  },\n  {\n    '--prism-attr-name': ['#1950c2', '#a6e22e']\n  },\n  {\n    '--prism-string': ['#474545', '#e6db74']\n  },\n  {\n    '--prism-char': ['#39adb5', '#a6e22e']\n  },\n  {\n    '--prism-builtin': ['#39adb5', '#a6e22e']\n  },\n  {\n    '--prism-inserted': ['#39adb5', '#a6e22e']\n  },\n  {\n    '--prism-operator': ['#39adb5', '#f8f8f2']\n  },\n  {\n    '--prism-entity': ['#393566', '#f8f8f2']\n  },\n  {\n    '--prism-url': ['#e53935', '#f8f8f2']\n  },\n  {\n    '--prism-variable': ['#e53935', '#fd971f']\n  },\n  {\n    '--prism-atrule': ['#7c4dff', '#e6db74']\n  },\n  {\n    '--prism-attr-value': ['#3c77b1', '#e6db74']\n  },\n  {\n    '--prism-function': ['#ff7c4d', '#e6db74']\n  },\n  {\n    '--prism-class-name': ['#ca3253', '#e46e86']\n  },\n  {\n    '--prism-keyword': ['#0a14f5', '#66d9ef']\n  },\n  {\n    '--prism-regex': ['#6182b8', '#e90']\n  },\n  {\n    '--prism-important': ['#7c4dff', '#fd971f']\n  },\n  {\n    '--playground-top': ['rgb(223, 223, 223)', 'rgb(32, 40, 48)']\n  }\n]\n\nexport const setTheme = (theme) => {\n  colors.forEach((value) => {\n    document.documentElement.style.setProperty(\n      Object.keys(value)[0],\n      theme === 'light'\n        ? Object.values(value)[0][0]\n        : Object.values(value)[0][1]\n    )\n  })\n}\n","import React, { useEffect, useState } from 'react'\nimport { highlight, languages } from 'prismjs'\nimport uuid from 'react-uuid'\nimport Editor from 'react-simple-code-editor'\nimport { BsArrowCounterclockwise } from 'react-icons/bs'\nimport { setTheme } from './colors'\nimport { createGlobalStyle } from 'styled-components'\nimport './styles.css'\n\nconst CreateDynamicStyles = (themeTransitionSpeed, mobileQuery) =>\n  createGlobalStyle`\n    .td {\n        transition: background-color ${themeTransitionSpeed || 0}ms;\n    }\n    @media screen and (max-width: ${mobileQuery || 0}px) {\n        .codepen-display {\n            flex-direction: column;\n        }\n        .codepen-editors {\n            width: 100%;\n            margin: 0;\n        }\n        .codepen-results {\n            width: 100%;\n            padding: 10px 10px 6px 10px;\n            box-sizing: border-box;\n        }\n        .codepen-display {\n            height: fit-content !important;\n        }\n        .codepen-iframe-container {\n            height: fit-content;\n            padding: 0;\n        }\n    }\n`\n\nexport default function CodepenEditor({\n  HTML,\n  CSS,\n  JS,\n  initial,\n  theme,\n  resettable,\n  height,\n  themeTransitionSpeed,\n  mobileQuery\n}) {\n  const DynamicStyles = CreateDynamicStyles(themeTransitionSpeed, mobileQuery)\n\n  // determines if the user can reset the editor\n  // eslint-disable-next-line no-unneeded-ternary\n  const _resettable = resettable !== undefined ? resettable : true\n\n  // save initial state of the editor\n  const [_HTML, setHTML] = useState(HTML || '')\n  const [_CSS, setCSS] = useState(CSS || '')\n  const [_JS, setJS] = useState(JS || '')\n\n  // if no default language is passed, set html as visible\n  const [selected, setSelected] = useState(initial || 'HTML')\n\n  // generate unique id for this iframe\n  const iFrameId = uuid()\n  const [iFrame, setIFrame] = useState(null)\n\n  useEffect(() => {\n    setTheme(theme)\n  }, [theme])\n\n  useEffect(() => {\n    if (document) {\n      const frame = document.getElementById('codepen-iframe-' + iFrameId)\n        .contentWindow.document\n\n      setIFrame(frame)\n      writeInFrame(frame, _HTML, _CSS, _JS)\n    }\n  }, [])\n\n  const resetIFrame = () => {\n    const resetButton = document.getElementById('codepen-reset-' + iFrameId)\n\n    resetButton.classList.add('codepen-reset-active')\n    setTimeout(() => {\n      resetButton.classList.remove('codepen-reset-active')\n    }, 400)\n\n    setHTML(HTML || '')\n    setCSS(CSS || '')\n    setJS(JS || '')\n\n    writeInFrame(iFrame, HTML, CSS, JS)\n\n    checkForUndefined(iFrame)\n  }\n\n  const checkForUndefined = () => {\n    const frame = document.getElementById('codepen-iframe-' + iFrameId)\n      .contentWindow.document\n\n    if (frame.body.innerHTML.includes('undefined')) {\n      frame.body.innerHTML = ''\n    }\n  }\n\n  const writeInFrame = (frame, HTML, CSS, JS) => {\n    frame.open()\n    frame.writeln(\n      HTML + '<style>' + CSS + '</style>' + '<script>' + JS + '</script>'\n    )\n    frame.close()\n  }\n\n  const updateTextArea = (type, val) => {\n    let tmpHTML = _HTML\n    let tmpCSS = _CSS\n    let tmpJS = _JS\n\n    if (type === 'HTML') {\n      setHTML(val)\n      tmpHTML = val\n    } else if (type === 'CSS') {\n      setCSS(val)\n      tmpCSS = val\n    } else if (type === 'JS') {\n      setJS(val)\n      tmpJS = val\n    }\n\n    writeInFrame(iFrame, tmpHTML, tmpCSS, tmpJS)\n  }\n\n  return (\n    <div className='codepen'>\n      <DynamicStyles />\n      <div className='codepen-title-flex td'>\n        <span className='codepen-title td'>Code playground</span>\n        {_resettable && (\n          <BsArrowCounterclockwise\n            id={'codepen-reset-' + iFrameId}\n            title='Reset code'\n            onClick={resetIFrame}\n            className='codepen-reset'\n            size={23}\n          />\n        )}\n      </div>\n\n      <div style={{ height: height || '350px' }} className='codepen-display td'>\n        <div className='codepen-editors'>\n          <div className='codepen-editor-picker td'>\n            {\n              <button\n                className={`td ${\n                  selected === 'HTML' ? 'codepen-title-selected ' : ''\n                }`}\n                onClick={() => setSelected('HTML')}\n              >\n                HTML\n              </button>\n            }\n\n            {\n              <button\n                className={`td ${\n                  selected === 'CSS' ? 'codepen-title-selected ' : ''\n                }`}\n                onClick={() => setSelected('CSS')}\n              >\n                CSS\n              </button>\n            }\n\n            {\n              <button\n                className={`td ${\n                  selected === 'JS' ? 'codepen-title-selected ' : ''\n                }`}\n                onClick={() => setSelected('JS')}\n              >\n                JS\n              </button>\n            }\n          </div>\n          <div className='codepen-textareas td'>\n            <div\n              className={`codepen-editor td ${\n                selected === 'CSS' ? '' : 'codepen-editor-inactive'\n              }`}\n            >\n              {selected === 'CSS' && (\n                <Editor\n                  value={_CSS}\n                  onValueChange={(newVal) => updateTextArea('CSS', newVal)}\n                  highlight={(code) => highlight(code, languages.css)}\n                />\n              )}\n            </div>\n\n            <div\n              className={`codepen-editor td ${\n                selected === 'HTML' ? '' : 'codepen-editor-inactive'\n              }`}\n            >\n              {selected === 'HTML' && (\n                <Editor\n                  value={_HTML}\n                  onValueChange={(newVal) => updateTextArea('HTML', newVal)}\n                  highlight={(code) => highlight(code, languages.html, 'html')}\n                />\n              )}\n            </div>\n\n            <div\n              className={`codepen-editor td ${\n                selected === 'JS' ? '' : 'codepen-editor-inactive'\n              }`}\n            >\n              {selected === 'JS' && (\n                <Editor\n                  value={_JS}\n                  onValueChange={(newVal) => updateTextArea('JS', newVal)}\n                  highlight={(code) => highlight(code, languages.js, 'js')}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className='codepen-results td'>\n          <div className='codepen-results-title td'>Results</div>\n          <div className='codepen-iframe-container td'>\n            <iframe\n              scrolling='yes'\n              title='react-codepen-editor'\n              marginWidth='0'\n              marginHeight='0'\n              className='td'\n              id={'codepen-iframe-' + iFrameId}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport CodepenEditor from \"react-codepen-editor\";\nimport \"react-codepen-editor/dist/index.css\"\nimport { useState } from \"react\";\n\nconst App = () => {\n\n  const [theme, setTheme] = useState(\"dark\");\n\n  const switchTheme = () => {\n    if (theme === \"dark\") {\n      setTheme(\"light\");\n    } else {\n      setTheme(\"dark\");\n    }\n  }\n\n  const CSS = `button {\\n    font-size: 40px;\\n    margin: 10px;\\n}`;\n\n  const HTML = `<button onclick=\"foo()\" id=\"btn\">\\n    Click me!\\n</button>`;\n\n  const JS = `function foo() {\n    let btn = document.getElementById(\"btn\");\n    btn.innerHTML = \"I've been clicked!\";\\n}`;\n\n  return (\n    <div className=\"container\">\n      <div className=\"head\">\n        <h1>react-codepen-editor <span role=\"img\" aria-label='#'>✨🧙‍♂️</span></h1>\n        <button onClick={() => switchTheme()}>Toggle theme</button>    \n      </div>\n\n      <CodepenEditor \n      CSS={CSS}\n      HTML={HTML}\n      JS={JS}\n      initial=\"CSS\"\n      theme={theme}\n      mobileQuery={800}\n      height={300}\n      themeTransitionSpeed={150}/>\n    </div>)\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}